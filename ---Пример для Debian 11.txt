---Пример для Debian 11
--Первоначальная настройка виртуального сервера.
Создаем машину на виртуальном хостинге.
Логинимся в консоль от root (прараметры подключения брать у хостера).

Обновляемся
apt update && apt upgrade
apt install sudo 

создаем пользователя
adduser shkrebtsov

Добавляем его в SUDO
adduser shkrebtsov sudo

Перезагружаемся
reboot

Логинимся по ssh

--------
Вот здесь должна быть ебала с авторизацией по ключу

и как залогиниться по ключу
И логинимся по ключу
-----

Отключаем ssh по паролю

sudo nano /etc/ssh/sshd_config

PermitRootLogin no 
PasswordAuthentication no 
PubkeyAuthentication yes

Жмем Ctrl+x, y, Enter - что бы записать файл


Перезапускаем сервис ssh
sudo service ssh restart

Создаем системного пользователя под которым будет запускаться сервис foundryvtt
sudo adduser --system --no-create-home foundryvtt
У

становка требуемых пакетов
sudo apt install nginx curl openssl unzip ----

Установка node.js
curl -sL https://deb.nodesource.com/setup_14.x -o setup_14.sh
--- Эт под вопросом !!! sudo apt-get install gcc g++ make
 sudo sh ./setup_14.sh 
sudo apt-get install -y nodejs

Создаем директории 
sudo mkdir -p /srv/foundryvtt/{foundryvtt,foundrydata,foundrycert}


Скачиваем и распаковываем foundryvtt/ Выбираем вариант для Node.JS
$ curl 'Вставить ссылку' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Connection: keep-alive' -H 'Upgrade-Insecure-Requests: 1' -o foundryvtt.zip
sudo cp foundryvtt.zip /srv/foundryvtt/foundryvtt/
cd /srv/foundryvtt/foundryvtt
sudo unzip foundryvtt.zip 

Запускаем приложение и проверяем что оно работает
sudo node /srv/foundryvtt/foundryvtt/resources/app/main.js  --dataPath=/srv/foundryvtt/foundrydata
Убиваем процесс
Ctrl+c

--Запуск с использование самоподписных сертификатов
cd /srv/foundryvtt/foundrycert/
sudo openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 99999 -nodes
Отвечаем на все вопросы и у нас есть сгенерированные сертификаты
Конфигурируем файл json 
sudo nano /srv/foundryvtt/foundrydata/Config/options.json

"proxyPort": 443,
"proxySSL": true




--- Запускаем как сервис
Даем права на пользователя foundryvtt>
sudo chown foundryvtt /srv/foundryvtt/ -R
Создаем файл для запуска
sudo nano /etc/systemd/system/foundry.service
Вставляем в него текст

[Unit]
Description=FoundryVTT
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec-=1
User=foundryvtt
WorkingDirectory=/srv/foundryvtt/foundryvtt/resources/app
ExecStart=/usr/bin/node main.js --dataPath=/srv/foundryvtt/foundrydata

[Install]
WantedBy=multi-user.target


Жмем Ctrl+x, y, Enter - что бы записать файл

sudo systemctl start foundry.service 

Добавляем сервис в автозапуск
sudo systemctl enable foundry.service 

---Настройка nginx
Создаем сайт

 sudo nano /etc/nginx/sites-enabled/foundryvtt

      server {

            # Enter your fully qualified domain name or leave blank
            server_name             Имя_домена;

            # Listen on port 80 without SSL certificates
            #listen                  80;
            # Listen on port 443 using SSL certificates
            listen                  443 ssl;
            listen                  [::]:443 ssl;
            ssl_certificate         "/srv/foundryvtt/foundrycert/cert.pem";
            ssl_certificate_key     "/srv/foundryvtt/foundrycert/key.pem";

            # Sets the Max Upload size to 300 MB
            client_max_body_size 300M;

            # Proxy Requests to Foundry VTT
            location / {

                 # Set proxy heade
                 proxy_set_header Host $host;
                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                 proxy_set_header X-Forwarded-Proto $scheme;

                 # These are important to support WebSockets
                 proxy_set_header Upgrade $http_upgrade;
                 proxy_set_header Connection "Upgrade";

                # Make sure to set your Foundry VTT port number
                proxy_pass http://localhost:30000;
            }
        }

       server {
              if ($host = Имя_домена) {
                  return 301 https://$host$request_uri;
             }

              listen 80;
              listen [::]:80;

              server_name Имя_домена;
              return 404;
}


Перезапускаем nginx
sudo service nginx restart



 
